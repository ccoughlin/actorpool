akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "WARNING"
  log-config-on-start = "off"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    serialize-creators=off
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      // Use Protobuf for serializing Myriad messages - better performance vs. vanilla Java serializer
      "com.emphysic.myriad.network.messages.ImmutableMessage" = proto
    }
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-received-messages = on
    log-sent-messages = on
    netty.tcp {
      # The hostname or ip clients should connect to.
      # InetAddress.getLocalHost.getHostAddress is used if empty
      hostname = ""
      port = 8888
      // Maximum allowable message size
      maximum-frame-size = 1280000b
    }
  }
}

actorpool {
  // Specify which pool we'll actually be running
  mode = "roi"
}

// Region Of Interest (ROI) Pool
roi {
  num_workers = 17 // Number of workers in the pool
  cls = "com.emphysic.myriad.actorpool.ROIPool" // Class of pool to instantiate
  // Path to ROIBundle - trained model, preprocessor, and associated metadata
  // Can be full path e.g. /path/to/mymodel.myr, or reference to JAR's resources folder e.g. /model.myr
  bundle = "/pa_canny_median.myr"
}

// Sliding Window Pool
window {
  num_workers = 15 // Number of workers in the pool
  cls = "com.emphysic.myriad.actorpool.WindowPool" // Class of pool to instantiate
  // Width of window in elements
  width = 15
  // Height of window in elements
  height = 15
  // Step size of window in elements
  step = 7
}